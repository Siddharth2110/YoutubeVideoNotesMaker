  Input and Output description. In this section, you will be givendetails on how the input is formatted and on how you should formatyour output. This part is usually written in a formal manner. A good problemshould have clear input constraints as the same problem might besolvable with different algorithms for different input constraints. Sample Input and Sample Output. Problem authors usually onlyprovide trivial test cases to contestants. The sample inputoutput is intended for contestants to checktheir basic understanding of the problem and to verify if their codecan parse the given input using the given input format and producethe correct output using the given output format. Do not submit your code to the judge if it does not even pass thegiven sample inputoutput. See Section 1.2.5 about testing yourcode before submission.  ion. Hints or Footnotes. In some cases, the problem authors may drophints or add footnotes to further describe the problem. Typical InputOutput RoutinesMultiple Test CasesIn a programming contest problem, the correctness of your code isusually determined by running your code against several test cases.Rather than using many individual test case files, modernprogramming contest problems usually use one test case file withmultiple test cases included.  ed.  d.In this section, we use a very simple problem as an example of amultipletest-cases problem Given two integers in one line, outputtheir sum in one line. We will illustrate three possible inputoutputformats The number of test cases is given in the first line of the input. The multiple test cases are terminated by special values usuallyzeroes. The multiple test cases are terminated by the EOF end-of-filesignal.  l.  l.  ers and Blank LinesSome problems with multiple test cases require the output of eachtest case to be numbered sequentially. Some also require a blank line after each test case. Lets modify thesimple problem above to include the case number in the outputstarting from one with this output format Case NUMBERANSWER followed by a blank line for each test case. Assumingthat the input is terminated by the EOF signal. Some other problems require us to output blank lines onlybetween test cases. If we use the approach above, we will end up with an extra newline at the end of our output, producing unnecessary PresentationError PE verdict.  ict.  Number of Inputs Lets change the simple problem above slightly. For each test caseeach input line, we are now given an integer k k  1, followed by kintegers. Our task is now to output the sum of these k integers. Assumingthat the input is terminated by the EOF signal and we do not requirecase numbering.Time to Start the Journey There is no better way to begin your journey in competitiveprogramming than to solve a few programming problems. To help you pick problems to start with among the  4097problems in UVa online judge 47, we have listed some of theeasiest Ad Hoc problems below. More details about Ad Hoc problems will be presented in the nextSection 1.4.  4. Super Easy You should get these problems AC9 in under 7 minutes10 each! Ifyou are new to competitive programming, we strongly recommendthat you start your journey by solving some problems from thiscategory after completing the previous Section 1.3.2. Note Since each category contains numerous problems for you totry, we have highlighted a maximum of three 3 must try problems in each category. These are the problems that, we think,are more interesting or are of higher quality.  y.  r quality.Easy We have broken up the Easy category into two smaller ones. Theproblems in this category are still easy, but just a bit harder thanthe Super Easy ones.Medium One Notch Above Easy Here, we list some other Ad Hoc problems that may be slightlytrickier or longer than those in the Easy category.  gory.  c Problems We will terminate this chapter by discussing the first properproblem type in the ICPCs and IOls The Ad Hoc problems. Accordingto USACO 48, the Ad Hoc problems are problems that cannot beclassified anywhere else since each problem description and itscorresponding solution are unique. Many Ad Hoc problems are easyas shown in Section 1.3, but this does not apply to all Ad Hocproblems. Ad Hoc problems frequently appear in programming contests. InICPC,  1-2 problems out of every  10 problems are Ad Hocproblems. If the Ad Hoc problem is easy, it will usually be the firstproblem solved by the teams in a programming contest. However,there were cases where solutions to the Ad Hoc problems were toocomplicated to implement, causing some teams to strategically deferthem to the last hour. In an ICPC regional contest with about 60teams, your team would rank in the lower half rank 30-60 if youcan only solve Ad Hoc problems.  ms.  