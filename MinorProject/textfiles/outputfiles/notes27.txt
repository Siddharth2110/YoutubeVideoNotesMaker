  Hash Table C11 STL unordered map18 and JavaHashMapHashSetHashTable The Hash Table is another non-lineardata structure, but we do not recommend using it in programmingcontests unless absolutely necessary. Designing a well-performing hash function is often tricky and onlythe new C11 has STL support for it Java has Hash-relatedclasses. Moreover, C STL maps or sets and Java TreeMaps or TreeSetsare usually fast enough as the typical input size of programmingcontest problems is usually not more than 1M. Within these bounds, the O1 performance of Hash Tables andOlog 1M performance for balanced BSTs do not differ by much. Thus, we do not discuss Hash Tables in detail in this section. However, a simple form of Hash Tables can be used inprogramming contests. Direct Addressing Tables DATs can beconsidered to be Hash Tables where the keys themselves are theindices, or where the hash function is the identity function.    ction. For example, we may need to assign all possible ASCII characters0-255 to integer values, e.g. a  3 W  107...., 1  13 Forthis purpose, we do not need the C STLmap or any form ofhashing as the key itself the value of the ASCII character is uniqueand sufficient to determine the appropriate index in an array of size256. Some programming exercises involving DATs are listed in theprevious Section 2.2.   2.2.   2.2.  tion 2.2.Data Structures with Our Own LibrariesAs of 24 May 2013, important data structures shown in this sectiondo not have built-in support yet in C STL or Java API. Thus, to becompetitive, contestants should prepare bug-free implementationsof these data structures. In this section, we discuss the key ideasand example implementations see the given source code too ofthese data structures.  s.  res.Graph The graph is a pervasive structure which appears in manyComputer Science problems.A graph G  VE in its basic form is simply a set of vertices V and edges E storing connectivity information between vertices in V Later in Chapter 3, 4, 8, and 9, we will explore many importantgraph problems and algorithms.  thms.To prepare ourselves, we will discuss three basic ways there are afew other rare structures to represent a graph G with V verticesand E edges in this subsection.A. The Adjacency Matrix, usually in the form of a 2D array seeFigure 2.4. In programming contest problems involving graphs,the number of vertices V is usually known. Thus we can build a connectivity table by creating a static 2Darray int AdjMatV JV J. This has an OV 2 space21 complexity. For an unweighted graph,set AdjMatij to a non-zero value usually 1 if there is an edgebetween vertex i-j or zero otherwise. For a weighted graph, set AdjMatij  weighti,j if there is anedge between vertex i-j with weighti,j or zero otherwise.Adjacency Matrix cannot be used to store multigraph.  tigraph.  h. Fora simple graph without self-loops, the main diagonal of thematrix contains only zeroes, i.e. AdjMatii  0, v7 0..V-1. An Adjacency Matrix is a good choice if the connectivity betweentwo vertices in a small dense graph is frequently required. However, it is not recommended for large sparse graphs as itwould require too much space OV 2 and there would be manyblank zero cells in the 2D array.  array.  array.  etitive setting, it is usually infeasible to use AdjacencyMatrices when the given V is larger than  1000. Another drawbackof Adjacency Matrix is that it also takes OV  time to enumerate thelist of neighbors of a vertex van operation common to manygraph algorithmseven if a vertex only has a handful of neighbors.Amore compact and efficient graph representation is the AdjacencyList discussed below.B. The Adjacency List, usually in the form of a vector of vector ofpairs see Figure 2.4.Using the C STL vectorvii AdjList, with vii defined as intypedef pairint, int ii typedef vectorii vii  data type shortcutsUsing the Java API Vector Vector  IntegerPair   AdjList.IntegerPairis a simple Java class that contains a pair of integers likeii above.  ove.  ncy Lists, we have a vector of vector of pairs, storing thelist of neighbors of each vertex u as edge information pairs. Each pair contains two pieces of information, the index of theneighbouring vertex and the weight of the edge. If the graph is unweighted, simply store the weight as 0, 1, or dropthe weight attribute22 entirely. The space complexity of Adjacency List is OV  E because if thereare E bidirectional edges in a simple graph, this Adjacency List willonly store 2E edge information pairs. As E is usually much smaller than V xV -12  OV 2themaximum number of edges in a complete simple graph, AdjacencyLists are often more space-efficient than Adjacency Matrices. Note that Adjacency List can be used to store multigraph.  aph.  