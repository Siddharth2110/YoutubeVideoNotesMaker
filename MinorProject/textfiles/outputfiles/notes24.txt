  The discussion of each data structure in Section 2.2-2.3 is brief,with an emphasis on the important ibrary routines that exist formanipulating the data structures. However, special data structures that are common in programmingcontests, such as bitmask and several bit manipulation techniquessee Figure 2.1 are discussed in more detail. Section 2.4 contains more data structures for which there exist nobuilt-in implementation, and thus require us to build our ownlibraries. Section 2.4 has a more in-depth discussion than Section 2.2-23 Value-Added Features of this Book As this chapter is the first that dives into the heart of competitiveprogramming, we will now take the opportunity to highlight severalvalue-added features of this book that you will see in this and thefollowing chapters.  ters.  apters.A key feature of this book is its accompanying collection of efficient,fully-implemented examples in both CC and Java that many otherComputer Science books lack, stopping at the pseudo-code level intheir demonstration of data structures and algorithms. This feature has been in the book since the very first edition. Theimportant parts of the source code have been included in the book3and the full source code is hosted atsites.google.comsitestevenhalimhomematerial.  ial.  aterial. Another strength of this book is the collection of both written andprogramming exercises mostly supported by the UVa Online Judge47 and integrated with uHuntsee Appendix A.In the third edition, we have added many more written exercises.We have classified the written exercises into non-starred and starredones. The non-starred written exercises are meant to be used mainly forself-checking purposes solutions are given at the back of eachchapter.  pter.  pter. The starred written exercises can be used for extrachallenges we do not provide solutions for these but may insteadprovide some helpful hints.In the third edition, we have added visualizations4 for many datastructures and algorithms covered in this book 27. We believe thatthese visualizations will be a huge benefit to the visual learners in ourreader base. At this point in time 24 May 2013, the visualizationsare hosted at www.comp.nus.edu.sgstevenhavisualization. Linear DS with Built-in LibrariesA data structure is classified as a inear data structure if its elementsforma linear sequence, i.e. its elements are arranged from left toright or top to bottom.   bottom.   bottom. Mastery of these basic linear data structuresbelow is critical in todays programming contests. Static Array native support in both CC and Java This is clearly the most commonly used data structure inprogramming contests.Whenever there is a collection of sequential data to be stored andlater accessed using their indices, the static array is the most naturaldata structure to use. As the maximum input size is usually mentioned in the problemstatement, the array size can be declared to be the maximum inputsize, with a small extra buffer sentinel for safetyto avoid theunnecessary off by one RTE. Typically, 1D, 2D, and 3D arrays are used in programming contestsproblems rarely require arrays of higher dimension.  on.  ion. Typical array operations include accessing elements by their indices,sorting elements, performing a linear scan or a binary search onasorted array. Dynamically-Resizeable Array C STL vector Java ArrayListfaster or Vector. This data structure is similar to the static array, except that it isdesigned to handle runtime resizing natively.It is better to use a vector in place of an array if the size of thesequence of elements is unknown at compile-time.  e-time.  e. Usually, we initialize the size reserve or resize with theestimated size of the collection for better performance. Typical C STL vector operations used in competitive programminginclude push back, at, the  operator, assign, clear, erase, anditerators for traversing the contents of vectors.It is appropriate to discuss two operations commonly performed onArrays Sorting and Searching. These two operations are wellsupported in C and Java. There are many sorting algorithmsmentioned in CS books 7, 5, 54, 12, 40, 58, e.g. On2 comparison-based sorting algorithmsBubbleSelectionInsertion Sort, etc. These algorithms are awfullyslow and usually avoided in programming contests, thoughunderstanding them might help you solve certain problems.    roblems. On log n comparison-based sorting algorithmsMergeHeapQuick Sort, etc. These algorithms are the default choicein programming contests as an On log n complexity is optimal forcomparison-based sorting. Therefore, these sorting algorithms run in the best possible time inmost cases see below for special purposesorting algorithms.In addition, these algorithms are well-known and hence we do notneed to reinvent the wheel5we can simply use sort, partial sort,or stable sort in C STL algorithm or Collections.sort in Java forstandard sorting tasks. We only need to specify the requiredcomparison function and these library routines will handle the rest.   rest.  