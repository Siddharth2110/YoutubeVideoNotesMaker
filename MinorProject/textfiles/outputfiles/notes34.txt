  We can also use the second equation x x y x z  Band assumethat x  y z to obtain x x x xx  Bor x  3VB. The new range of x is22......22.We can also prune the search space by using if statements toexecute only some of the inner loops, or use break andorcontinue statements to stopskip loops. The code shown below is now much faster than the code shownabove there are a few other optimizations required to solve theextreme version of this problem UVa 11571 - Simple Equations -Extreme!! Iterative Complete Search Permutations UVa 11742 - SocialConstraints Abridged problem statement There are 0 n8movie goers.   goers.  s. They will sit in the front row in n consecutive open seats. Thereare 0s mS 20 seating constraints among them, i.e. movie goeraand movie goer b must be at most or at least c seats apart. The question is simple How many possible seating arrangementsare there The key part to solve this problem is in realizing that we have toexplore all permutations seating arrangements. Once we realize this fact, we can derive this simple Om x n!filtering solution. We set counter  0 and then try all possible npermutations. We increase the counter by 1 if the current permutation satisfiesall m constraints.  ints. When all n! permutations have been examined, we output thefinal value of counter. As the maximum n is 8 and maximum m is 20, the largest testcase will still only require 20 x 8!  806400 operationsa perfectlyviable solution. If you have never written an algorithm to generate allpermutations of a set of numbers see Exercise 1.2.3, task 7, youmay still be unsure about how to proceed. The simpleC solution is shown below. Iterative Complete Search Subsets UVa 12455 - Bars Abridged problem statementt1 Given a list  containing 1 n  20integers, is there a subset of list  that sums to another giveninteger X  X  X  ger X We can try all 2n possible subsets of integers, sum the selectedintegers for each subset in On, and see if the sum of the selectedintegers equals to X. The overall time complexity is thus On x 2n. For the largest testcase when n  20, this is just 20 x 220  21M. This is large but still viable for reason described below.Recursive Complete Search Simple Backtracking UVa 750 - 8 Queens Chess Problem Abridged problem statement In chess with an 8 x 8 board, it ispossible to place eight queens on the board such that no twoqueens attack each other.  r.   other. Determine all such possible arrangements given the position ofone of the queens i.e. coordinate a, b must contain aqueen. Output the possibilities in lexicographical sorted order. The most naive solution is to enumerate all combinations of 8different cells out of the 8 x 8  64 possible cells in a chess boardand see if the 8 queens can be placed at these positions withoutconflicts. However, there are 64C8  4B such possibilitiesthis idea is noteven worth trying.  ng.  g. A better but still naive solution is to realize that each queen canonly occupy one column, so we can put exactly one queen in eachcolumn. There are only 88  17M possibilities now, down from 4B. This is still a borderline-passing solution for this problem. If wewrite a Complete Search like this, we are likely to receive the TimeLimit Exceeded TLE verdict especially if there are multiple testcases. We can still apply the few more easy optimizations describedbelow to further reduce the search space. We know that no two queens can share the same column or thesame row.  ow.  ow.  . Using this, we can further simplify the original problem to theproblem of finding valid permutations of 8! row positions. The value of rowi describes the row position of the queen incolumn i. Example row  1, 3, 5, 7, 2, 0, 6, 4 as in Figure 3.1 is oneof the solutions for this problem row0  1 implies that the queenin column O is placed in row 1, and so on the index starts from 0 inthis example. Modeled this way, the search space goes down from 88  17M to8!  40K. This solution is already fast enough, but we can still do more. We also know that no two queens can share any of the twodiagonal lines.   lines. Let queen A be at i, j and queen B be at k, . They attack each other iff absi-k  absj-l. This formula meansthat the vertical and horizontal distances between these twoqueens are equal, i.e. queen A and B lie on one of each others twodiagonal lines. A recursive backtracking solution places the queens one by one incolumns 0 to 7, observing all the constraints above. Finally, if a candidate solution is found, check if at least one of thequeens satisfies the input constraints, i.e. rowb  a. This sub i.e. lower than On! solution will obtain an AC verdict.  ict.  ict.  