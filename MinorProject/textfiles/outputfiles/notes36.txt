 Tip 5 Try Solving the Problem Backwards Some contest problems look far easier when they are solvedbackwards 53 from a ess obvious angle than when they aresolved using a frontal attack from the more obvious angle. Be prepared to attempt unconventional approaches to problems. This tip is best illustrated using an example UVa 10360 - Rat AttackImagine a 2D array up to 1024x 1024 containing rats. There are n s 20000 rats spread across the cells. Determine which cell x, y should be gas-bombed so that thenumber of rats killed in a square box x-d, y-d to xd, yd ismaximized. The value d is the power of the gas-bomb d  50, see Figure 3.2. An immediate solution is to attack this problem in the mostobvious fashion possible bomb each of the 10242 cells and selectthe most effective location.    n. For each bombed cell x, y, we can perform an Od2 scan to countthe number of rats killed within the squarebombing radius. For the worst case, when the array has size 10242 and d  50, thistakes 10242 x 502  2621M operations. TLE3! Another option is to attack this problem backwards Create anarray int killed10241024. For each rat population at coordinate x, y, add it to killedij,where i-x dand j-y d. This is because if a bomb was placed at i, j, the rats at coordinatex, y will be killed. This pre-processing takes Onxd2 operations.  ions.  -processing takes Onxd2 operations. Then, to determine the most optimal bombing position, we cansimply find the coordinate of the highest entry in array killed, whichcan be done in 10242 operations. This approach only requires 20000x502  10242  51M operationsfor the worst test case n 20000, d  50,  51 times faster than thefrontal attack! This is an AC solution.Tip 6 Optimizing Your Source Code There are many tricks that you can use to optimize your code. Understanding computer hardware and how it is organized,especially the O, memory, and cache behavior, can help you designbetter code. Some examples not exhaustive are shown below A biased opinion Use C instead of Java. An algorithm implemented using C usually runs faster than theone implemented in Java in many online judges, including UVa 47.  7.  UVa 47. Some programming contests give Java users extra time to accountfor the difference in performance. For CC users, use the faster C-style scanfprintf rather thancincout. Use the expected On log n but cache-friendly quicksort in C STLalgorithmsort part of introsort rather than the true On log nbut non cache-friendly heapsort its root-to-leafleaf-to-rootoperations span a wide range of indiceslots of cache misses. Access a 2D array in a row major fashion row by row rather thanina column major fashionmultidimensional arrays are stored inarow-major order in memory. Bit manipulation on the built-in integer data types up to the 64-bitinteger is more efficient than index manipulation in an array ofbooleans see bitmask in Section 2.2.    ction 2.2. If we need more than 64 bits, use the C STL bitset rather thanvectorbool e.g. for Sieve of Eratosthenes in Section 5.5.1. Use lower level data structurestypes at all times if you do notneed the extra functionality in the higher level or larger ones. For example, use an array with a slightly larger size than themaximum size of input instead of using resizable vectors. Also, use 32-bit ints instead of 64-bit long longs as the 32-bit int isfaster in most 32-bit online judge systems. For Java, use the faster ArrayList and StringBuilder rather thanVector and StringBuffer. Java Vectors and StringBuffers are thread safe but this feature isnot needed in competitive programming.  gramming.  gramming.  ming. Note In this book, we will stick with Vectors to avoid confusingbilingual C and Java readers who use both the C STL vector andJava Vector. Declare most data structures especially the bulky ones, e.g. Largearrays once by placing them in global scope. Allocate enough memory to deal with the largest input of theproblem. This way, we do not have to pass the data structures around asfunction arguments. For problems with multiple test cases, simply clearreset thecontents of the data structure before dealing with each test case. When you have the option to write your code either iteratively orrecursively, choose the iterative version.   version. Example The iterative C STL next permutation and iterativesubset generation techniques using bitmask shown in Section 3.2.1are far faster than if you write similar routines recursively mainlydue to overheads in function calls. Array access in nested loops can be slow. If you have an array Aand you frequently access the value of Ai without changing it innested loops, it may be beneficial to use a local variable temp  Aiand works with temp instead.In CC, appropriate usage of macros or inline functions canreduce runtime. For C users Using C-style character arrays will yield fasterexecution than when using the C STL string.  string.  ring. For Java users Be careful with String manipulation as Java Stringobjects are immutable. Operations on Java Strings can thus be very slow. Use JavaStringBuilder instead. Browse the Internet or relevant books e.g. 69 to find muchmore information on how to speed up your code. Practice this code hacking skill by choosing a harder problem inUva online judge where the runtime of the best solution is not0.000s. Submit several variants of your Accepted solution and check theruntime differences. Adopt hacking modification that consistently gives you fasterruntime.  untime.  