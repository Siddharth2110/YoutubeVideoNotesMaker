 Problem Solving ParadigmsOverview and MotivationIn this chapter, we discuss four problem solving paradigmscommonly used to attack problems in programming contests,namely Complete Search a.k.a Brute Force, Divide and Conquer,the Greedy approach, and Dynamic Programming. Allcompetitive programmers, including Ol and ICPC contestants,need to master these problem solving paradigms and more inorder to be able to attack a given problem with the appropriatetool. Hammering every problem with Brute Force solutions will notenable anyone to perform well in contests.To illustrate, we discuss four simple tasks below involving an arrayA containing n s 10K small integers  100K e.g. A  10, 7, 3, 5, 8, 2,9, n  7 to give an overview of what happens if we attempt everyproblem with Brute Force as our sole paradigm.  adigm.  aradigm.1. Find the largest and the smallest element of A. 10 and 2 for thegiven example.2. Find the kth smallest element in A. if k  2, the answer is 3 forthe given example.3. Find the largest gap g such that x, y A and g  x-y. 8 for thegiven example.4. Find the longest increasing subsequence of A. 3, 5, 8, 9 for thegiven example.  le.  ample. The answer for the first task is simple Try each element of A andcheck if it is the current largest or smallest element seen so far. This is an On Complete Search solution. The second task is a little harder. We can use the solution above to find the smallest value andreplace it with a large value e.g. 1M to delete it. We can then proceed to find the smallest value again the secondsmallest value in the original array and replace it with 1M.      h 1M. Repeating this process k times, we will find the kth smallest value. This works, but if k  n2 the median, this Complete Searchsolution runs in On2x n  On2. Instead, we can sort the array A in On log n, returning theanswer simply as Ak-1. However, a better solution for a small number of queries is theexpected On solution shown in Section 9.29. The On log n and On solutions above are Divide and Conquersolutions. For the third task, we can similarly consider all possible twointegers x and y in A, checking if the gap between them is thelargest for each pair. This Complete Search approach runs in On2. It works, but is slowand inefficient.  icient.  icient.  t. We can prove that g can be obtained by finding the differencebetween the smallest and largest elements of A. These two integers can be found with the solution of the first taskin On. No other combination of two integers in A can produce a largergap. This is a Greedy solution. For the fourth task, trying all O2n possible subsequences to findthe longest increasing one is not feasible for all n  10K.n Section 3.5.2, we discuss a simple On2 Dynamic Programmingsolution and also the faster On log k Greedy solution for this task. Here is some advice for this chapter Please do not just memorizethe solutions for each problem discussed, but instead rememberand internalize the thought process and problem solving strategiesused.  giesused.  on 3.5.2, we discuss a simple On2 Dynamic Programmingsolution and also the faster On log k Greedy solution for this task. Here is some advice for this chapter Please do not just memorizethe solutions for each problem discussed, but instead rememberand internalize the thought process and problem solving strategiesused. Good problem solving skills are more important than memorizedsolutions for well-known Computer Science problems when dealingwith often creative and novel contest problems.Complete Search The Complete Search technique, also known as brute force orrecursive backtracking, is a method for solving a problem bytraversing the entire or part of the search space to obtainthe required solution.  lution.  lution.  he search, we are allowed to prune that is, choose not toexplore parts of the search space if we have determined thatthese parts have no possibility of containing the required solution. In programming contests, a contestant should develop a CompleteSearch solution when there is clearly no other algorithm availablee.g. the task of enumerating a permutations of 0, 1, 2,...,N- 1clearly requires ON! operations or when better algorithms exist,but are overkill as the input size happens to be small e.g. theproblem of answering Range Minimum Queries as in Section 2.4.3but on static arrays with N  100 is solvable with an ON loop foreach query.In ICPC, Complete Search should be the first solution consideredas it is usually easy to come up with such a solution and tocodedebug it. Remember the KISS principle Keep It Short andSimple. A bug-free Complete Search solution should never receivethe Wrong Answer WA response in programming contests as itexplores the entire search space.    