 TipsThe biggest gamble in writing a Complete Search solution iswhether it will or will not be able to pass the time limit. If the time limit is 10 seconds online judges do not usually uselarge time limits for efficient judging and your program currentlyruns in  10 seconds on several can be more than one test caseswith the largest input size as specified in the problem description,yet your code is still judged to be TLE, you may want to tweak thecritical code2 in your program instead of re-solving the problemwith a faster algorithm which may not be easy to design. Here are some tips that you may want to consider when designingyour Complete Search solution for a certain problem to give it ahigher chance of passing the Time Limit. Writing a good Complete Search solution is an art in itself.  n itself.  in itself.Tip 1 Filtering versus Generating Programs that examine lots of if not all candidate solutions andchoose the ones that are correct or remove the incorrect ones arecalled filters, e.g. the naIve 8-queens solver with 64C8 and 88time complexity, the iterative solution for UVa 725 and UVa 11742,etc. Usually filter programs are written iteratively. Programs that gradually build the solutions and immediatelyprune invalid partial solutions are called generators, e.g. theimproved recursive 8-queens solver with its sub-On! complexityplus diagonal checks.  .  .  checks. Usually, generator programs are easier to implement whenwritten recursively as it gives us greater flexibility for pruning thesearch space. Generally, filters are easier to code but run slower, given that it isusually far more difficult to prune more of the search spaceiteratively. Do the math complexity analysis to see if a filter is good enoughor if you need to create a generator.Tip 2 Prune InfeasibleInferior Search Space Early When generating solutions using recursive backtracking see thetip no 1 above, we may encounter a partial solution that will neverlead to a full solution.  ution.  ion. We can prune the search there and explore other parts of thesearch space. Example The diagonal check in the 8-queens solution above.Suppose we have placed a queen at row0  2. Placing the next queen at row1  1 or row1  3 will cause adiagonal conflict and placing the next queen at row1  2 will causea row conflict. Continuing from any of these infeasible partial solutions will neverlead to a valid solution. Thus we can prune these partial solutions at this juncture andconcentrate only on the other valid positions row1  0, 4, 5, 6, 7,thus reducing the overall runtime.  time.  ime. Asa rule of thumb, the earlier you can prune the search space, thebetter.In other problems, we may be able to compute the potentialworth of a partial and still valid solution. If the potential worth is inferior to the worth of the current bestfound valid solution so far, we can prune the search there.Utilize Symmetries Some problems have symmetries and we should try to exploitsymmetries to reduce execution time! In the 8-queens problem,there are 92 solutions but there are only 12 unique orfundamentalcanonical solutions as there are rotational and linesymmetries in the problem.  problem.  m. You can utilize this fact by only generating the 12 unique solutionsand, if needed, generate the whole 92 by rotating and reflectingthese 12 unique solutions. Example row 7-1, 7-3, 7-5, 7-7, 7-2, 7-0, 7-6, 7-4  6, 4, 2, 0, 5,7, 1, 3 is the horizontal reflection of the configuration in Figure 3.1. However, we have to remark that it is true that sometimesconsidering symmetries can actually complicate the code.In competitive programming, this is usually not the best way wewant shorter code to minimize bugs.If the gain obtained by dealing with symmetry is not significant insolving the problem, just ignore this tip.  .  p.Pre-Computation a.k.a. Pre-Calculation Sometimes it is helpful to generate tables or other data structuresthat accelerate the lookup of a result prior to the execution of theprogram itself. This is called Pre-Computation, in which one trades memoryspacefor time. However, this technique can rarely be used for recentprogramming contest problems.  oblems.  oblems. For example, since we know that there are only 92 solutions in thestandard 8-queens chess problem, we can create a 2D array intsolution928 and then fill it with all 92 valid permutations of the8-queens row positions! That is, we can create a generator program which takes sometime to run to fill this 2D array solution. Afterwards, we can write another program to simply and quicklyprint the correct permutations within the 92 pre-calculatedconfigurations that satisfy the problem constraints.  .  