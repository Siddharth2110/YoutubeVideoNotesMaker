  Ad Hoc problems in other chaptersThere are many other Ad Hoc problems which we have shifted toother chapters sincethey required knowledge above basic programming skills. Ad Hoc problems involving the usage of basic linear datastructures especiallyarrays are listed in Section 2.2.- Ad Hoc problems involving mathematical computation are listedin Section 5.2.-Ad Hoc problems involving string processing are listed in Section6.3.- Ad Hoc problems involving basic geometry are listed in Section7.2. Ad Hoc problems listed in Chapter 9.  er 9.  problems involving string processing are listed in Section6.3.- Ad Hoc problems involving basic geometry are listed in Section7.2. Ad Hoc problems listed in Chapter 9. Tips After solving a number of programming problems, you beginto realize a pattern in your solutions. Certain idioms are usedfrequently enough in competitive programming implementation forshortcuts to be useful. From a CC perspective, these idioms might include Libraries tobe included cstdio, cmath, cstring, etc, data type shortcuts ii, vii,vi, etc, basic O routines freopen, multiple input format, etc, loopmacros e.g. define REPi, a, b for int i  inta i intb i,etc, and a few others.  hers.   others.A competitive programmer using CC can store these inaheader file like competitive.h. With such a header, the solution toevery problem begins with a simple includecompetitive.h.However, this tips should not be used beyond competitiveprogramming, especially in software industry. Chapter 2Data Structures and LibrariesIf  have seen further it is only by standing on the shoulders ofgiants. Isaac Newton  ton2.1 Overview and Motivation A data structure DS is a means of storing and organizing data.Different data structures have different strengths. So whendesigning an algorithm, it is important to pick one that allows forefficient insertions, searches, deletions, queries, andor updates,depending on what your algorithm needs. Although a data structure does not in itself solve a programmingcontest problem the algorithm operating on it does, using anappropriately efficient data structure for a problem may be thedifference between passing or exceeding the problems time limit.  limit.  limit.  t. There can be many ways to organize the same data andsometimes one way is better than the other in some contexts. We will illustrate this several times in this chapter. A keenfamiliarity with the data structures and libraries discussed in thischapter is critically important for understanding the algorithms thatuse them in subsequent chapters. As stated in the preface of this book, we assume that you arefamiliar with the basic data structures listed in Section 2.2-2.3 andthus we will not review them in this book. Instead, we will simply highlight the fact that there exist built-inimplementations for these elementary data structures in the CSTLand Java API1.   API1.  . If you feel that you are not entirely familiar with any of the termsor data structures mentioned in Section 2.2-2.3, please reviewthose particular terms and concepts in the various reference books2that cover them, including classics such as the Introduction toAlgorithms 7, Data Abstraction and Problem Solving 5, 54,Data Structures and Algorithms 12, etc. Continue reading this book only when you understand at least thebasic concepts behind these data structures.  tructures. Note that for competitive programming, you only need to knowenough about these data structures to be able to select and to usethe correct data structures for each given contest problem. Youshould understand the strengths, weaknesses, and timespacecomplexities of typical data structures. The theory behind them is definitely good reading, but can oftenbe skipped or skimmed through, since the built-in libraries provideready-to-use and highly reliable implementations of otherwisecomplex data structures. This is not a good practice, but you will find that it is oftensufficient.      nger contestants have been able to utilize the efficientwith a Olog n complexity for most operations C STL map orJava TreeMap implementations to store dynamic collections of key-data pairs without an understanding that the underlying datastructure is a balanced Binary Search Tree, or use the C STLpriority queue or Java PriorityQueue to order a queue of itemswithout understanding that the underlying data structure is ausually Binary Heap. Both data structures are typically taught in year one ComputerScience curriculae. This chapter is divided into three parts. Section 2.2 contains basiclinear data structures and the basic operations they support.Section 2.3 covers basic non-linear data structures such asbalanced Binary Search Trees BST, Binary Heaps, and HashTables, as well as their basic operations.    