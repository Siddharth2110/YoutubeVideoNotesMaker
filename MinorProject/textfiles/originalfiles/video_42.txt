Approach 5: Bottom-Up DP (Accepted)
There is another way to implement a DP solution often referred to as the bottom-up DP.
This is actually the ‘true form’ of DP as DP was originally known as the ‘tabular method’
(computation technique involving a table). The basic steps to build bottom-up DP solution
are as follows:
1. Determine the required set of parameters that uniquely describe the problem (the
state). This step is similar to what we have discussed in recursive backtracking and
top-down DP earlier.
2. If there are N parameters required to represent the states, prepare an N dimensional
DP table, with one entry per state. This is equivalent to the memo table in top-down
DP. However, there are differences. In bottom-up DP, we only need to initialize some
cells of the DP table with known initial values (the base cases). Recall that in topdown
DP, we initialize the memo table completely with dummy values (usually -1) to
indicate that we have not yet computed the values.
3. Now, with the base-case cells/states in the DP table already filled, determine the
cells/states that can be filled next (the transitions). Repeat this process until the DP
table is complete. For the bottom-up DP, this part is usually accomplished through
iterations, using loops (more details about this later).
For UVa 11450, we can write the bottom-up DP as follow: We describe the state of a subproblem
with two parameters: The current garment g and the current money. This state
formulation is essentially equivalent to the state in the top-down DP above, except that we
have reversed the order to make g the first parameter (thus the values of g are the row indices
of the DP table so that we can take advantage of cache-friendly row-major traversal in a 2D
array, see the speed-up tips in Section 3.2.3). Then, we initialize a 2D table (boolean matrix)
reachable[g][money] of size 20 × 201. Initially, only cells/states reachable by buying any
of the models of the first garment g = 0 are set to true (in the first row). Let’s use test case
A above as example. In Figure 3.8, top, the only columns ‘20-6 = 14’, ‘20-4 = 16’, and ‘20-8
= 12’ in row 0 are initially set to true.
Now, we loop from the second garment g = 1 (second row) to the last garment g = C-1 =
3-1 = 2 (third and last row) in row-major order (row by row). If reachable[g-1][money]
is true, then the next state reachable[g][money-p] where p is the price of a model of
current garment g is also reachable as long as the second parameter (money) is not negative.
See Figure 3.8, middle, where reachable[0][16] propagates to reachable[1][16-5] and
reachable[1][16-10] when the model with price 5 and 10 in garment g = 1 is bought,
respectively; reachable[0][12] propagates to reachable[1][12-10] when the model with
price 10 in garment g = 1 is bought, etc. We repeat this table filling process row by row
until we are done with the last row12.
Finally, the answer can be found in the last row when g = C-1. Find the state in
that row that is both nearest to index 0 and reachable. In Figure 3.8, bottom, the cell
reachable[2][1] provides the answer. This means that we can reach state (money = 1)
by buying some combination of the various garment models. The required final answer is
actually M - money, or in this case, 20-1 = 19. The answer is “no solution” if there is no
state in the last row that is reachable (where reachable[C-1][money] is set to true). We
provide our implementation below for comparison with the top-down version.
There is an advantage for writing DP solutions in the bottom-up fashion. For problems
where we only need the last row of the DP table (or, more generally, the last updated slice
of all the states) to determine the solution—including this problem, we can optimize the
memory usage of our DP solution by sacrificing one dimension in our DP table. For harder
DP problems with tight memory requirements, this ‘space saving trick’ may prove to be
useful, though the overall time complexity does not change.
Let’s take a look again at Figure 3.8. We only need to store two rows, the current row
we are processing and the previous row we have processed. To compute row 1, we only need
to know the columns in row 0 that are set to true in reachable. To compute row 2, we
similarly only need to know the columns in row 1 that are set to true in reachable. In
general, to compute row g, we only need values from the previous row g − 1. So, instead
of storing a boolean matrix reachable[g][money] of size 20 × 201, we can simply store
reachable[2][money] of size 2 × 201. We can use this programming trick to reference one
row as the ‘previous’ row and another row as the ‘current’ row (e.g. prev = 0, cur = 1)
and then swap them (e.g. now prev = 1, cur = 0) as we compute the bottom-up DP row
by row. Note that for this problem, the memory savings are not significant. For harder DP
problems, for example where there might be thousands of garment models instead of 20, this
space saving trick can be important.
