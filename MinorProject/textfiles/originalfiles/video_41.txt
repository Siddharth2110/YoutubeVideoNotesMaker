Approach 2: Divide and Conquer (Wrong Answer)
This problem is not solvable using the Divide and Conquer paradigm. This is because the
sub-problems (explained in the Complete Search sub-section below) are not independent.
Therefore, we cannot solve them separately with the Divide and Conquer approach.
Approach 3: Complete Search (Time Limit Exceeded)
Next, let’s see if Complete Search (recursive backtracking) can solve this problem. One way
to use recursive backtracking in this problem is to write a function shop(money, g) with
two parameters: The current money that we have and the current garment g that we are
dealing with. The pair (money, g) is the state of this problem. Note that the order of
parameters does not matter, e.g. (g, money) is also a perfectly valid state. Later in Section
3.5.3, we will see more discussion on how to select appropriate states for a problem.
We start with money = M and garment g = 0. Then, we try all possible models in
garment g = 0 (a maximum of 20 models). If model i is chosen, we subtract model i’s price
from money, then repeat the process in a recursive fashion with garment g = 1 (which can
also have up to 20 models), etc. We stop when the model for the last garment g = C-1 has
been chosen. If money < 0 before we choose a model from garment g = C-1, we can prune
the infeasible solution. Among all valid combinations, we can then pick the one that results
in the smallest non-negative money. This maximizes the money spent, which is (M - money).
This solution works correctly, but it is very slow! Let’s analyze the worst case time complexity.
In the largest test case, garment g = 0 has up to 20 models; garment g = 1 also
has up to 20 models and all garments including the last garment g = 19 also have up to 20
models. Therefore, this Complete Search runs in 20 × 20 × . . . × 20 operations in the worst
case, i.e. 2020 = a very large number. If we can only come up with this Complete Search
solution, we cannot solve this problem.
Let’s verify if this problem indeed has overlapping sub-problems. Suppose that there are 2
models in a certain garment g with the same price p. Then, a Complete Search will move to
the same sub-problem shop(money - p, g + 1) after picking either model! This situation
will also occur if some combination of money and chosen model’s price causes money1 - p1
= money2 - p2 at the same garment g. This will—in a Complete Search solution—cause the
same sub-problem to be computed more than once, an inefficient state of affairs!
So, how many distinct sub-problems (a.k.a. states in DP terminology) are there in this
problem? Only 201 × 20 = 4020. There are only 201 possible values for money (0 to 200
inclusive) and 20 possible values for the garment g (0 to 19 inclusive). Each sub-problem just
needs to be computed once. If we can ensure this, we can solve this problem much faster.
The implementation of this DP solution is surprisingly simple. If we already have the recursive
backtracking solution (see the recurrences—a.k.a. transitions in DP terminology—
shown in the Complete Search approach above), we can implement the top-down DP by
adding these two additional steps:
Initialize10 a DP ‘memo’ table with dummy values that are not used in the problem,
e.g. ‘-1’. The DP table should have dimensions corresponding to the problem states.
At the start of the recursive function, check if this state has been computed before.
(a) If it has, simply return the value from the DP memo table, O(1).
(This the origin of the term ‘memoization’.)
(b) If it has not been computed, perform the computation as per normal (only once)
and then store the computed value in the DP memo table so that further calls to
this sub-problem (state) return immediately.
Analyzing a basic11 DP solution is easy. If it has M distinct states, then it requires O(M)
memory space. If computing one state (the complexity of the DP transition) requires O(k)
steps, then the overall time complexity is O(kM). This UVa 11450 problem has M =
201 × 20 = 4020 and k = 20 (as we have to iterate through at most 20 models for each
garment g). Thus, the time complexity is at most 4020 × 20 = 80400 operations per test
case, a very manageable calculation.
We display our code below for illustration, especially for those who have never coded a
top-down DP algorithm before. Scrutinize this code and verify that it is indeed very similar
to the recursive backtracking code that you have seen in Section 3.2.
