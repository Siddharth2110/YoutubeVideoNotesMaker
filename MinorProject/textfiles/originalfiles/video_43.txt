Top-Down versus Bottom-Up DP
Although both styles use ‘tables’, the way the bottom-up DP table is filled is different to that
of the top-down DP memo table. In the top-down DP, the memo table entries are filled ‘as
needed’ through the recursion itself. In the bottom-up DP, we used a correct ‘DP table filling
order’ to compute the values such that the previous values needed to process the current cell
have already been obtained. This table filling order is the topological order of the implicit
DAG (this will be explained in more detail in Section 4.7.1) in the recurrence structure. For
most DP problems, a topological order can be achieved simply with the proper sequencing
of some (nested) loops.
For most DP problems, these two styles are equally good and the decision to use a
particular DP style is a matter of preference. However, for harder DP problems, one of the styles can be better than other.
Displaying the Optimal Solution
Many DP problems request only for the value of the optimal solution (like the UVa 11450
above). However, many contestants are caught off-guard when they are also required to print
the optimal solution. We are aware of two ways to do this.
The first way is mainly used in the bottom-up DP approach (which is still applicable for
top-down DPs) where we store the predecessor information at each state. If there are more
than one optimal predecessors and we have to output all optimal solutions, we can store
those predecessors in a list. Once we have the optimal final state, we can do backtracking
from the optimal final state and follow the optimal transition(s) recorded at each state until
we reach one of the base cases. If the problem asks for all optimal solutions, this backtracking
routine will print them all. However, most problem authors usually set additional output
criteria so that the selected optimal solution is unique (for easier judging).
Example: See Figure 3.8, bottom. The optimal final state is reachable[2][1]. The
predecessor of this optimal final state is state reachable[1][2]. We now backtrack to
reachable[1][2]. Next, see Figure 3.8, middle. The predecessor of state reachable[1][2]
is state reachable[0][12]. We then backtrack to reachable[0][12]. As this is already
one of the initial base states (at the first row), we know that an optimal solution is: (20→12)
= price 8, then (12→2) = price 10, then (2→1) = price 1. However, as mentioned earlier
in the problem description, this problem may have several other optimal solutions, e.g. We
can also follow the path: reachable[2][1] → reachable[1][6] → reachable[0][16]
which represents another optimal solution: (20→16) = price 4, then (16→6) = price 10,
then (6→1) = price 5.
The second way is applicable mainly to the top-down DP approach where we utilize the
strength of recursion and memoization to do the same job. Using the top-down DP code
shown in Approach 4 above, we will add another function void print shop(int money,
int g) that has the same structure as int shop(int money, int g) except that it uses
the values stored in the memo table to reconstruct the solution. A sample implementation
(that only prints out one optimal solution) is shown below:
Classical Examples
The problem UVa 11450 - Wedding Shopping above is a (relatively easy) non-classical DP
problem, where we had to come up with the correct DP states and transitions by ourself.
However, there are many other classical problems with efficient DP solutions, i.e. their
DP states and transitions are well-known. Therefore, such classical DP problems and their
solutions should be mastered by every contestant who wishes to do well in ICPC or IOI! In
this section, we list down six classical DP problems and their solutions. Note: Once you
understand the basic form of these DP solutions, try solving the programming exercises that
enumerate their variants
Max 1D Range Sum
Abridged problem statement of UVa 507 - Jill Rides Again: Given an integer array A containing
n ≤ 20K non-zero integers, determine the maximum (1D) range sum of A. In other words,
find the maximum Range Sum Query (RSQ) between two indices i and j in [0..n-1], that
is: A[i] + A[i+1] + A[i+2] +...+ A[j] (also see Section 2.4.3 and 2.4.4).
A Complete Search algorithm that tries all possible O(n2) pairs of i and j, computes
the required RSQ(i, j) in O(n), and finally picks the maximum one runs in an overall time
complexity of O(n3). With n up to 20K, this is a TLE solution.
In Section 2.4.4, we have discussed the following DP strategy: Pre-process array A by computing
A[i] += A[i-1] ∀i ∈ [1..n-1] so that A[i] contains the sum of integers in subarray
A[0..i]. We can now compute RSQ(i, j) in O(1): RSQ(0, j) = A[j] and RSQ(i, j)
= A[j] - A[i-1] ∀i > 0. With this, the Complete Search algorithm above can be made
to run in O(n2). For n up to 20K, this is still a TLE approach. However, this technique is
still useful in other cases (see the usage of this 1D Range Sum in Section 8.4.2).
